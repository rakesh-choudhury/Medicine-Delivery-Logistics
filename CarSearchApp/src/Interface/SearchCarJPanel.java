/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Car;
import Business.CarInformationList;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rakesh
 */
public class SearchCarJPanel extends javax.swing.JPanel {
    
    private JPanel searchJPanel;
    
    private List<Car> carList;
   

    /**
     * Creates new form searchCarJPanel
     */
    

    public SearchCarJPanel(JPanel portalPanel, List<Car> carList) {
        initComponents();   
        this.searchJPanel = portalPanel;
        this.carList = carList;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableManageCar = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cmbBrandDiv = new javax.swing.JComboBox<String>();
        jLabel3 = new javax.swing.JLabel();
        cmbManuYear = new javax.swing.JComboBox<String>();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtMinValue = new javax.swing.JTextField();
        txtMaxValue = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnAttributeSearch = new javax.swing.JButton();
        txtSerialNumber = new javax.swing.JTextField();
        btnSerialNo = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        listAllManuBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        manuTextArea = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();

        tableManageCar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Year", "Model No", "City Name", "Brand", "Max Seats", "Min Seats"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableManageCar);

        jLabel2.setText("Brand:");

        cmbBrandDiv.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Ferrari", "BMW", "Toyota", "GM" }));
        cmbBrandDiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBrandDivActionPerformed(evt);
            }
        });

        jLabel3.setText("Manufactured Year:");

        cmbManuYear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "2016", "2017", "2018", "2019" }));
        cmbManuYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbManuYearActionPerformed(evt);
            }
        });

        jLabel1.setText("Max Seats:");

        jLabel4.setText("Min Seats:");

        btnSearch.setText("Search by Seats");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnAttributeSearch.setText("Search by Attributes ");
        btnAttributeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttributeSearchActionPerformed(evt);
            }
        });

        txtSerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerialNumberActionPerformed(evt);
            }
        });

        btnSerialNo.setText("Search by Serial Number");
        btnSerialNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerialNoActionPerformed(evt);
            }
        });

        jButton1.setText("< Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        listAllManuBtn.setText("Manufactures List");
        listAllManuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAllManuBtnActionPerformed(evt);
            }
        });

        manuTextArea.setColumns(20);
        manuTextArea.setRows(5);
        jScrollPane2.setViewportView(manuTextArea);

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Search with different attributes");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(287, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbManuYear, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(73, 73, 73)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmbBrandDiv, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtMinValue, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtMaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(48, 48, 48)
                                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(70, 70, 70))))
                .addGap(207, 207, 207)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAttributeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listAllManuBtn))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSerialNo))
                        .addGap(248, 248, 248))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jButton1)
                        .addGap(92, 92, 92)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSerialNo))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(listAllManuBtn)
                                .addGap(66, 66, 66)
                                .addComponent(btnAttributeSearch))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbManuYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmbBrandDiv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMinValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(64, 64, 64)
                        .addComponent(btnSearch)))
                .addContainerGap(217, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbManuYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbManuYearActionPerformed
        // TODO add your handling code here:
        List<Car>newYearList = new ArrayList<Car>();
        newYearList = cmbManuYearChange(carList);
    }//GEN-LAST:event_cmbManuYearActionPerformed

    private void cmbBrandDivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBrandDivActionPerformed
        // TODO add your handling code here:
        cmbBrandDivChange(carList);       
    }//GEN-LAST:event_cmbBrandDivActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        List<Car>searchList = new ArrayList<Car>();
        List<Car>newList = new ArrayList<Car>();
        searchList= carList;
        int minCount;
        int maxCount;
        
        String min = txtMinValue.getText();
            try{
                Integer.parseInt(min);
            } catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Please enter number for minimum value");
                return;
            }
        String max = txtMaxValue.getText();
            try{
                Integer.parseInt(max);
            } catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Please enter number for maximum value");
                return;
            }    
            
        if(txtMinValue.getText() != null && !txtMinValue.getText().isEmpty()){
        minCount = Integer.parseInt(txtMinValue.getText());
        }else{
        minCount = 0;   
        }
        if(txtMaxValue.getText() != null && !txtMaxValue.getText().isEmpty()){
        maxCount = Integer.parseInt(txtMaxValue.getText());
        }else{
        maxCount = 0;   
        }
        searchList = cmbBrandDivChange(searchList);
        searchList = cmbManuYearChange(searchList);
        
         for(Car car: searchList){
            if(car.getMin_seats() >= minCount  && car.getMax_seats() <= maxCount){
                newList.add(car);
            }
            
        }
         DefaultTableModel dtm = (DefaultTableModel)tableManageCar.getModel();
         dtm.setRowCount(0);
        for(Car car : newList){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=car.getManufactured_year();
            row[1]=car.getModel_num();
            row[2]=car.getAvailble_city();
            row[3]=car.getBrand();
            row[4]= car.getMax_seats();
            row[5]= car.getMin_seats();
            
            dtm.addRow(row);
        }   
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAttributeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttributeSearchActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        ShowAttributesJPanel panel = new ShowAttributesJPanel(this.searchJPanel,carList);
        this.searchJPanel.add("ShowAttributesJPanel",panel);
        CardLayout layout = (CardLayout) (this.searchJPanel.getLayout());
        layout.next(searchJPanel); 
    }//GEN-LAST:event_btnAttributeSearchActionPerformed

    private void btnSerialNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerialNoActionPerformed
        // TODO add your handling code here:
        
        String serialNo =    txtSerialNumber.getText();
            try{
                Integer.parseInt(serialNo);
            } catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Please enter number for Serial No.");
                return;
            }
    int serialNumber = Integer.parseInt(serialNo);
    List<Car> result = new ArrayList<Car>();
    result = CarInformationList.SearchSerialNumber(serialNumber);
    if (result == null){
       JOptionPane.showMessageDialog(null,"Pleas enter valid Input");
     }
    else
    {
        ViewJPanel panel = new ViewJPanel(this.searchJPanel,carList,result);
        this.searchJPanel.add("ViewJPanel",panel);
        CardLayout layout = (CardLayout) (this.searchJPanel.getLayout());
        layout.next(searchJPanel);
    
    }
    }//GEN-LAST:event_btnSerialNoActionPerformed

    private void txtSerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerialNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSerialNumberActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        searchJPanel.remove(this);
        CardLayout layout = (CardLayout) searchJPanel.getLayout();
        layout.previous(searchJPanel);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void listAllManuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listAllManuBtnActionPerformed
        // TODO add your handling code here:
        List<String>searchList1 = new ArrayList<String>();
       List<String>searchList2 = new ArrayList<String>();
       
       String list = new String();
       
       for(Car car:carList){
           searchList1.add(car.getBrand());
       }
       
       System.out.println(searchList1.stream().distinct().collect(Collectors.toList()));
       searchList2 = searchList1.stream().distinct().collect(Collectors.toList());
       
       for(String string: searchList2){
          list = list + "\n" +string;
       }
        manuTextArea.setText(list);
    }//GEN-LAST:event_listAllManuBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAttributeSearch;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSerialNo;
    private javax.swing.JComboBox<String> cmbBrandDiv;
    private javax.swing.JComboBox<String> cmbManuYear;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton listAllManuBtn;
    private javax.swing.JTextArea manuTextArea;
    private javax.swing.JTable tableManageCar;
    private javax.swing.JTextField txtMaxValue;
    private javax.swing.JTextField txtMinValue;
    private javax.swing.JTextField txtSerialNumber;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
     DefaultTableModel dtm = (DefaultTableModel)tableManageCar.getModel();
         dtm.setRowCount(0);
        for(Car car : carList){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=car.getManufactured_year();
            row[1]=car.getModel_num();
            row[2]=car.getAvailble_city();
            row[3]=car.getBrand();
            row[4]= car.getMax_seats();
            row[5]= car.getMin_seats();
            dtm.addRow(row);
        }   
    }

    private List<Car> cmbBrandDivChange(List<Car> carList) {
        List<Car> TempList = new ArrayList<Car>();
        String searchString = "";
        String yearString = "";
        searchString = cmbBrandDiv.getItemAt(cmbBrandDiv.getSelectedIndex());
        yearString = String.valueOf(cmbManuYear.getItemAt(cmbManuYear.getSelectedIndex()));
        for(Car car: carList){
        if(!searchString.equals("All")){    
        if (car.getBrand().equals(searchString)){
         if(!yearString.equals("All")){
            if (car.getManufactured_year() == Integer.parseInt(yearString)){
                TempList.add(car);
            }
            }else if(yearString.equals("All")){
                TempList.add(car);
            }
        }
        }else{
            if(!yearString.equals("All")){
            if (car.getManufactured_year() == Integer.parseInt(yearString)){
                TempList.add(car);
            }
            }else if(yearString.equals("All")){
                TempList.add(car);
            }
        }
        }
        DefaultTableModel dtm = (DefaultTableModel)tableManageCar.getModel();
         dtm.setRowCount(0);
        for(Car car : TempList){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=car.getManufactured_year();
            row[1]=car.getModel_num();
            row[2]=car.getAvailble_city();
            row[3]=car.getBrand();
            row[4]= car.getMax_seats();
            row[5]= car.getMin_seats();
            dtm.addRow(row);
        }
        return TempList;
    }

    private List<Car> cmbManuYearChange(List<Car> carList) {
      List<Car> yearList = new ArrayList<Car>();
        String yearString = "";
        String searchString = "";
        yearString = String.valueOf(cmbManuYear.getItemAt(cmbManuYear.getSelectedIndex()));
        searchString = cmbBrandDiv.getItemAt(cmbBrandDiv.getSelectedIndex());
        for(Car car: carList){
            if(!yearString.equals("All")){
            if (car.getManufactured_year() == Integer.parseInt(yearString)){
                if (car.getBrand().equals(searchString)){
                    yearList.add(car);
                }else{
                    yearList.add(car);
                }
            }
            }
        }
         for(Car car: carList){
        if(yearString.equals("All")){
            yearList.add(car);
         }
         }
        DefaultTableModel dtm = (DefaultTableModel)tableManageCar.getModel();
        dtm.setRowCount(0);
        for(Car car : yearList){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=car.getManufactured_year();
            row[1]=car.getModel_num();
            row[2]=car.getAvailble_city();
            row[3]=car.getBrand();
            row[4]= car.getMax_seats();
            row[5]= car.getMin_seats();
            
            dtm.addRow(row);
        }
        return yearList;
    }
}
